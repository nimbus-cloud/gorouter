// This file was generated by counterfeiter
package fakes

import (
	"sync"

	routing_api "github.com/cloudfoundry-incubator/routing-api"
	"github.com/cloudfoundry-incubator/routing-api/db"
	"github.com/cloudfoundry-incubator/routing-api/handlers"
)

type FakeRouteValidator struct {
	ValidateCreateStub        func(routes []db.Route, maxTTL int) *routing_api.Error
	validateCreateMutex       sync.RWMutex
	validateCreateArgsForCall []struct {
		routes []db.Route
		maxTTL int
	}
	validateCreateReturns struct {
		result1 *routing_api.Error
	}
	ValidateDeleteStub        func(routes []db.Route) *routing_api.Error
	validateDeleteMutex       sync.RWMutex
	validateDeleteArgsForCall []struct {
		routes []db.Route
	}
	validateDeleteReturns struct {
		result1 *routing_api.Error
	}
	ValidateTcpRouteMappingStub        func(tcpRouteMappings []db.TcpRouteMapping) *routing_api.Error
	validateTcpRouteMappingMutex       sync.RWMutex
	validateTcpRouteMappingArgsForCall []struct {
		tcpRouteMappings []db.TcpRouteMapping
	}
	validateTcpRouteMappingReturns struct {
		result1 *routing_api.Error
	}
}

func (fake *FakeRouteValidator) ValidateCreate(routes []db.Route, maxTTL int) *routing_api.Error {
	fake.validateCreateMutex.Lock()
	fake.validateCreateArgsForCall = append(fake.validateCreateArgsForCall, struct {
		routes []db.Route
		maxTTL int
	}{routes, maxTTL})
	fake.validateCreateMutex.Unlock()
	if fake.ValidateCreateStub != nil {
		return fake.ValidateCreateStub(routes, maxTTL)
	} else {
		return fake.validateCreateReturns.result1
	}
}

func (fake *FakeRouteValidator) ValidateCreateCallCount() int {
	fake.validateCreateMutex.RLock()
	defer fake.validateCreateMutex.RUnlock()
	return len(fake.validateCreateArgsForCall)
}

func (fake *FakeRouteValidator) ValidateCreateArgsForCall(i int) ([]db.Route, int) {
	fake.validateCreateMutex.RLock()
	defer fake.validateCreateMutex.RUnlock()
	return fake.validateCreateArgsForCall[i].routes, fake.validateCreateArgsForCall[i].maxTTL
}

func (fake *FakeRouteValidator) ValidateCreateReturns(result1 *routing_api.Error) {
	fake.ValidateCreateStub = nil
	fake.validateCreateReturns = struct {
		result1 *routing_api.Error
	}{result1}
}

func (fake *FakeRouteValidator) ValidateDelete(routes []db.Route) *routing_api.Error {
	fake.validateDeleteMutex.Lock()
	fake.validateDeleteArgsForCall = append(fake.validateDeleteArgsForCall, struct {
		routes []db.Route
	}{routes})
	fake.validateDeleteMutex.Unlock()
	if fake.ValidateDeleteStub != nil {
		return fake.ValidateDeleteStub(routes)
	} else {
		return fake.validateDeleteReturns.result1
	}
}

func (fake *FakeRouteValidator) ValidateDeleteCallCount() int {
	fake.validateDeleteMutex.RLock()
	defer fake.validateDeleteMutex.RUnlock()
	return len(fake.validateDeleteArgsForCall)
}

func (fake *FakeRouteValidator) ValidateDeleteArgsForCall(i int) []db.Route {
	fake.validateDeleteMutex.RLock()
	defer fake.validateDeleteMutex.RUnlock()
	return fake.validateDeleteArgsForCall[i].routes
}

func (fake *FakeRouteValidator) ValidateDeleteReturns(result1 *routing_api.Error) {
	fake.ValidateDeleteStub = nil
	fake.validateDeleteReturns = struct {
		result1 *routing_api.Error
	}{result1}
}

func (fake *FakeRouteValidator) ValidateTcpRouteMapping(tcpRouteMappings []db.TcpRouteMapping) *routing_api.Error {
	fake.validateTcpRouteMappingMutex.Lock()
	fake.validateTcpRouteMappingArgsForCall = append(fake.validateTcpRouteMappingArgsForCall, struct {
		tcpRouteMappings []db.TcpRouteMapping
	}{tcpRouteMappings})
	fake.validateTcpRouteMappingMutex.Unlock()
	if fake.ValidateTcpRouteMappingStub != nil {
		return fake.ValidateTcpRouteMappingStub(tcpRouteMappings)
	} else {
		return fake.validateTcpRouteMappingReturns.result1
	}
}

func (fake *FakeRouteValidator) ValidateTcpRouteMappingCallCount() int {
	fake.validateTcpRouteMappingMutex.RLock()
	defer fake.validateTcpRouteMappingMutex.RUnlock()
	return len(fake.validateTcpRouteMappingArgsForCall)
}

func (fake *FakeRouteValidator) ValidateTcpRouteMappingArgsForCall(i int) []db.TcpRouteMapping {
	fake.validateTcpRouteMappingMutex.RLock()
	defer fake.validateTcpRouteMappingMutex.RUnlock()
	return fake.validateTcpRouteMappingArgsForCall[i].tcpRouteMappings
}

func (fake *FakeRouteValidator) ValidateTcpRouteMappingReturns(result1 *routing_api.Error) {
	fake.ValidateTcpRouteMappingStub = nil
	fake.validateTcpRouteMappingReturns = struct {
		result1 *routing_api.Error
	}{result1}
}

var _ handlers.RouteValidator = new(FakeRouteValidator)
