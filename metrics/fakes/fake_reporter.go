// This file was generated by counterfeiter
package fakes

import (
	"net/http"
	"sync"
	"time"

	"github.com/cloudfoundry/gorouter/metrics"
	"github.com/cloudfoundry/gorouter/route"
)

type FakeReporter struct {
	CaptureBadRequestStub        func(req *http.Request)
	captureBadRequestMutex       sync.RWMutex
	captureBadRequestArgsForCall []struct {
		req *http.Request
	}
	CaptureBadGatewayStub        func(req *http.Request)
	captureBadGatewayMutex       sync.RWMutex
	captureBadGatewayArgsForCall []struct {
		req *http.Request
	}
	CaptureRoutingRequestStub        func(b *route.Endpoint, req *http.Request)
	captureRoutingRequestMutex       sync.RWMutex
	captureRoutingRequestArgsForCall []struct {
		b   *route.Endpoint
		req *http.Request
	}
	CaptureRoutingResponseStub        func(b *route.Endpoint, res *http.Response, t time.Time, d time.Duration)
	captureRoutingResponseMutex       sync.RWMutex
	captureRoutingResponseArgsForCall []struct {
		b   *route.Endpoint
		res *http.Response
		t   time.Time
		d   time.Duration
	}
}

func (fake *FakeReporter) CaptureBadRequest(req *http.Request) {
	fake.captureBadRequestMutex.Lock()
	fake.captureBadRequestArgsForCall = append(fake.captureBadRequestArgsForCall, struct {
		req *http.Request
	}{req})
	fake.captureBadRequestMutex.Unlock()
	if fake.CaptureBadRequestStub != nil {
		fake.CaptureBadRequestStub(req)
	}
}

func (fake *FakeReporter) CaptureBadRequestCallCount() int {
	fake.captureBadRequestMutex.RLock()
	defer fake.captureBadRequestMutex.RUnlock()
	return len(fake.captureBadRequestArgsForCall)
}

func (fake *FakeReporter) CaptureBadRequestArgsForCall(i int) *http.Request {
	fake.captureBadRequestMutex.RLock()
	defer fake.captureBadRequestMutex.RUnlock()
	return fake.captureBadRequestArgsForCall[i].req
}

func (fake *FakeReporter) CaptureBadGateway(req *http.Request) {
	fake.captureBadGatewayMutex.Lock()
	fake.captureBadGatewayArgsForCall = append(fake.captureBadGatewayArgsForCall, struct {
		req *http.Request
	}{req})
	fake.captureBadGatewayMutex.Unlock()
	if fake.CaptureBadGatewayStub != nil {
		fake.CaptureBadGatewayStub(req)
	}
}

func (fake *FakeReporter) CaptureBadGatewayCallCount() int {
	fake.captureBadGatewayMutex.RLock()
	defer fake.captureBadGatewayMutex.RUnlock()
	return len(fake.captureBadGatewayArgsForCall)
}

func (fake *FakeReporter) CaptureBadGatewayArgsForCall(i int) *http.Request {
	fake.captureBadGatewayMutex.RLock()
	defer fake.captureBadGatewayMutex.RUnlock()
	return fake.captureBadGatewayArgsForCall[i].req
}

func (fake *FakeReporter) CaptureRoutingRequest(b *route.Endpoint, req *http.Request) {
	fake.captureRoutingRequestMutex.Lock()
	fake.captureRoutingRequestArgsForCall = append(fake.captureRoutingRequestArgsForCall, struct {
		b   *route.Endpoint
		req *http.Request
	}{b, req})
	fake.captureRoutingRequestMutex.Unlock()
	if fake.CaptureRoutingRequestStub != nil {
		fake.CaptureRoutingRequestStub(b, req)
	}
}

func (fake *FakeReporter) CaptureRoutingRequestCallCount() int {
	fake.captureRoutingRequestMutex.RLock()
	defer fake.captureRoutingRequestMutex.RUnlock()
	return len(fake.captureRoutingRequestArgsForCall)
}

func (fake *FakeReporter) CaptureRoutingRequestArgsForCall(i int) (*route.Endpoint, *http.Request) {
	fake.captureRoutingRequestMutex.RLock()
	defer fake.captureRoutingRequestMutex.RUnlock()
	return fake.captureRoutingRequestArgsForCall[i].b, fake.captureRoutingRequestArgsForCall[i].req
}

func (fake *FakeReporter) CaptureRoutingResponse(b *route.Endpoint, res *http.Response, t time.Time, d time.Duration) {
	fake.captureRoutingResponseMutex.Lock()
	fake.captureRoutingResponseArgsForCall = append(fake.captureRoutingResponseArgsForCall, struct {
		b   *route.Endpoint
		res *http.Response
		t   time.Time
		d   time.Duration
	}{b, res, t, d})
	fake.captureRoutingResponseMutex.Unlock()
	if fake.CaptureRoutingResponseStub != nil {
		fake.CaptureRoutingResponseStub(b, res, t, d)
	}
}

func (fake *FakeReporter) CaptureRoutingResponseCallCount() int {
	fake.captureRoutingResponseMutex.RLock()
	defer fake.captureRoutingResponseMutex.RUnlock()
	return len(fake.captureRoutingResponseArgsForCall)
}

func (fake *FakeReporter) CaptureRoutingResponseArgsForCall(i int) (*route.Endpoint, *http.Response, time.Time, time.Duration) {
	fake.captureRoutingResponseMutex.RLock()
	defer fake.captureRoutingResponseMutex.RUnlock()
	return fake.captureRoutingResponseArgsForCall[i].b, fake.captureRoutingResponseArgsForCall[i].res, fake.captureRoutingResponseArgsForCall[i].t, fake.captureRoutingResponseArgsForCall[i].d
}

var _ metrics.ProxyReporter = new(FakeReporter)
